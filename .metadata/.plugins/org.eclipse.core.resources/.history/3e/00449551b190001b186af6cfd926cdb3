package com.cg.es.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;

import com.cg.es.entity.CustomerEntity;
import com.cg.es.entity.Manager;
import com.cg.es.exception.ManagerNotFoundException;
import com.cg.es.model.AddressModel;
import com.cg.es.model.CustomerModel;
import com.cg.es.model.ManagerModel;
import com.cg.es.repository.ManagerRepository;

public class ManagerServiceTest {

	@Mock
	private ManagerRepository managerRepo;
	
	@InjectMocks
	private ManagerServiceImpl service;
	
	@Test
	@DisplayName("add manager")
	void testAdd() throws ManagerNotFoundException {
		
		Manager manager=new Manager(101L,"manager@123");
		Mockito.when(managerRepo.save(manager)).thenReturn(manager);
		assertTrue(managerRepo.save(manager) != null);
	}
	
	@Test
	@DisplayName("Manager Details should delete")
	void testDelete() throws ManagerNotFoundException {
		
		
		Manager manager=new Manager(1L,"manager@123");
		Mockito.when(managerRepo.save(manager)).thenReturn(manager);

		ManagerModel expected=new ManagerModel(1L,"manager@123");
		
		service.deleteById(manager.getManagerId());
		verify(managerRepo,times(1)).deleteById(manager.getManagerId());
	}
	
	@Test
	@DisplayName("Manager should retrive")
	void testFindAll() {
		
		
		List<Manager> testData=Arrays.asList(new Manager[] {
				new Manager(101L,"manager@123")
				
				
		});
		
		Mockito.when(managerRepo.findAll()).thenReturn(testData);
		
		List<ManagerModel> expected=Arrays.asList(new ManagerModel[] {
				new ManagerModel(101L,"manager@123")
				
		});
		
		List<ManagerModel> actual = service.findAll();
		
//		System.out.println(actual.hashCode() + "\n\n"+actual.toString()+"\n\n"+expected.hashCode()+"\n\n"+expected.toString());

		assertEquals(expected,actual);

	}
	
	
	@Test
	@DisplayName("get by Id ")
	void testFindById () {
		
		Manager testData=new Manager(101L,"manager@123");
		ManagerModel expected=new ManagerModel(101L,"manager@123");
		
		Mockito.when(managerRepo.findById(testData.getManagerId())).thenReturn(Optional.of(testData));
	
		ManagerModel actual=service.findById(testData.getManagerId());
		
		assertEquals(expected,actual);
	}
	
}
